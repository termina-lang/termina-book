{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Termina Book","text":"<p>Welcome to the documentation for the Termina Programming Language.</p>"},{"location":"alive/","title":"I'm alive","text":"<p>The transpilation tool, in addition to performing code translation, is used to create new Termina projects. Thus, the tool supports different commands. In particular, the <code>new</code> command allows you to create a new project containing an initial directory tree and a project configuration file with default parameters.</p> <p>In our case, we are going to create a new project named <code>alive</code>. To do this, we will execute the following command from the terminal:</p> <pre><code>$ termina new alive\n</code></pre> <p>After executing the command, a new directory called <code>alive</code> containing the following elements will have been generated:</p> <pre><code>alive\n    termina.yaml\n    app/app.fin\n    src\n    output\n</code></pre> <p>The file <code>termina.yaml</code> stores the project configuration parameters. The <code>app</code> directory contains the main Termina source code file of the application. By default, this file is named <code>app.fin</code>. The <code>src</code> directory will contain the additional modules that are part of the project. In our case, we will not add any files to this directory. The <code>output</code> directory will store the files generated by the transpiler from the Termina code.</p> <p>Next, we are going to modify the <code>app.fin</code> file, adding the following content:</p> <pre><code>task class AliveClass {\n\n    timer_port : sink TimeVal triggers timeout;\n\n    system_port : access SystemAPI;\n\n    action timeout(&amp;priv self, _current_time : TimeVal) -&gt; Status&lt;i32&gt; {\n\n        let msg : [char; 10] = \"I'm alive!\";\n        let ret : Status&lt;i32&gt; = Success;\n\n        self-&gt;system_port.println(10, &amp;msg);\n\n        return ret;\n\n    }\n\n};\n\nemitter timer : PeriodicTimer = {\n    period = {\n        tv_sec = 1,\n        tv_usec = 0\n    }\n};\n\n#[priority(10)]\ntask alive_task : AliveClass = {\n\n    timer_port &lt;- timer,\n    system_port &lt;-&gt; system_entry\n\n};\n</code></pre> <p>The next step is to update the <code>termina.yaml</code> configuration file, where we will need to add the following line at the end:</p> <pre><code>enable-system-port: true\n</code></pre> <p>Finally, we will generate the application code with the following commands:</p> <pre><code>$ termina build\n</code></pre> <p>If the command has been executed successfully, the output directory should contain the modules resulting from the transpilation. In order to compile and run the project, we will have to execute the following commands in the terminal:</p> <pre><code>$ cd output\n$ make\n$ ./bin/alive\n</code></pre> <p>The program will print the message \u201cI'm alive!\u201d on the screen every second. To exit, it will be necessary to interrupt the execution of the program by entering the key combination <code>Ctrl+C</code> in the terminal.</p>"},{"location":"install/","title":"Installation","text":"<p>To install the Termina to C transpiler it is necessary to compile the project directly from the source code. Unfortunately, binary releases are not available yet. To compile the project, it is first necessary to install the Stack tool. The Stack installation instructions can be found through this link.</p> <p>Once Stack is installed, you can proceed to clone the repository and then compile the project. To do this, you need to execute the following commands:</p> <pre><code>$ git clone https://github.com/termina-lang/termina\n$ cd termina\n$ stack init\n$ stack install\n</code></pre> <p>The first <code>stack</code> command will initialize the repository and generate the configuration files needed to compile the project. The second one allows you to compile the project and install the binary in a specific directory so that it is accessible for execution.</p> <p>In order to execute the code generated by the transpiler, it is necessary to install the Termina Operating System Abstraction Layer found in this repository.</p> <p>By default, the installation path of the Termina OSAL expected by the standard project compilation mechanism is the <code>/opt</code> directory. However, it is possible to modify the default path specifically for each project.</p> <p>In the following paragraphs, we will clone the Termina OSAL project and then create a symbolic link to the project directory within the <code>/opt</code> directory. To do this, it is necessary to execute the following commands:</p> <pre><code>$ git clone https://github.com/termina-lang/termina-osal\n$ cd /opt\n$ sudo ln -s /path/to/termina-osal\n</code></pre> <p>where <code>/path/to/termina-osal</code> must point to the actual path corresponding to the cloned repository.</p>"}]}